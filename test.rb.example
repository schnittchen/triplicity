require 'triplicity/application'

# require 'triplicity/primary'
# require 'triplicity/duplication_plan'
# require 'triplicity/backup_job'

require 'triplicity/setup_dsl/executor'
require 'triplicity/setup_dsl/main_target'

module Triplicity
  class TestApplication < Application
    def setup
      executor = SetupDsl::Executor.new(self)
      setup_dsl = SetupDsl::MainTarget.new(executor)

      setup_dsl.instance_exec do
        my_primary = PrimaryAt '/home/zaolin/backup'

        BackupTo(my_primary) do
          from '/home/zaolin/Desktop'

          ## configure options for all duplicity executions configured below in perform_every.

          # these map directly to duplicity options, see duplicity manpage:

          no_encryption

          # exclude_globbing_filelist '/home/thomas/local/duplicity-globbing-exclude'

          full_if_older_than 5.days # you can also use .minutes, .hours, ... and + and -

          # this is a convenience option:
          exclude_source_relative '.tmp', '.cache' # this line
          # produces the options --exclude /home/thomas/.tmp --exclude /home/thomas/.cache

          # produce any option with extra_arguments:
          extra_arguments '-vdebug'
          extra_arguments '--log-file', '/home/zaolin/duplicity.out'

          # perform a backup when the youngest existing is more than 8 hours old
          perform_every(8.hours) do
            # Since you will want to free space before performing a backup,
            # this consists of several steps, each line resulting in a duplicity invokation.
            # Most lines mimic duplicity action arguments.

            # Below is an exhaustive, non-realistic usage example.

            # All remove_ actions and cleanup use the --force option!

            remove_older_than 3.hours + 30.minutes
            remove_all_but_n_full 3
            remove_all_inc_of_but_n_full 3
            cleanup
            full
            backup # this means no action will be passed to duplicity, meaning duplicity
            # decides whether to do a full or an incremental backup
          end
        end

        #my_primary.duplicate_to_external_disk do
        #  max_space '120G'
        #  uuid '65ac96c0-918e-11e3-baa8-0800200c9a66'
        #  relative_path 'backups'
        #end
      end
      # Lets do the job
      executor.perform
    end
  end

  TestApplication.start
end
